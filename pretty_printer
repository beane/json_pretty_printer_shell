#!/bin/bash

# JSON Pretty Printer
# Author: beane

# This script tries to pretty print JSON-like data that is piped to it.
# It makes no assumptions about the validity of the input, nor will it 
# try to validate anything. The printer reads input characters one-by-one.

# The idea was to pretty print JSON-like data, even if it isn't valid.
# Other pretty printers would simply break on invalid JSON.

# Gotchas:
#     - supresses non-quoted whitespace for prettiness purposes
#     - skips newline characters for further prettification
#     - automatically inserts a space after colons in "key": "value" pairs
#     - prints 4 spaces (not tabs!) when indenting

# Usage:
# cat janky.json | ./pretty_printer

SPACE=' '
OPEN_CHARS='{[('
CLOSE_CHARS='}])'
COMMA=','
QUOTE='"'
COLON=':'
BACKSLASH='\'
SPECIAL_CHARS="$OPEN_CHARS""$CLOSE_CHARS""$COMMA""$QUOTE""$COLON""$BACKSLASH"

NUM_TABS=0
QUOTED=1
ESCAPED=1

print_tabs() {
    [[ -z "$1" ]] && printf "print_tabs needs a number\n" && exit 1
    [[ "$1" = 0 ]] && return

    for i in $(seq 1 "$1"); do
        printf '    '
    done
}

# for each character
# if it's normal, print it out
# if it's a control character, print newlines and tabs accordingly

# read input stream character-by-character
while IFS='' read -r -n1 -d '' char; do
    # skip newline characters
    [[ "$char" = $'\n' ]] && continue

    # PART 1: set program state

    # if character is a "special" character,
    # just print it out
    # skip if it's a non-quoted space
    # also restart the loop
    if [[ ! "$SPECIAL_CHARS" =~ "$char" ]]; then
        [[ "$QUOTED" -eq 1 && "$SPACE" = "$char" ]] && continue
        printf "$char"
        continue
    fi

    # if the character is a quote,
    # swap the QUOTED bool
    # then print character and restart the loop
    if [[ "$QUOTE" = "$char" ]]; then
        if [[ "$QUOTED" = 1 ]]; then
            QUOTED=0
        else
            QUOTED=1
        fi
        printf "$char"
        continue
    fi

    # if character is a backslash,
    # swap the BACKSLASH bool
    # then print it and restart the loop
    if [[ "$BACKSLASH" = "$char" ]]; then
        if [[ "$ESCAPED" = 1 ]]; then
            ESCAPED=0
        else
            ESCAPED=1
        fi
        printf "$char"
        continue
    fi

    # if this character is escaped (previous character was a non-escaped backslash)
    # print it, swap the ESCAPED bool and restart the loop
    # this basically tells the printer to avoid all the newline and tab
    # processing that comes later
    if [[ "$ESCAPED" = 0 ]]; then
        printf "$char"
        ESCAPED=1
        continue
    fi

    if [[ "$QUOTED" = 0 ]]; then
        printf "$char"
        continue
    fi

    # PART 2: print special control characters with tabs and newlines as appropriate

    if [[ "$OPEN_CHARS" =~ "$char" ]]; then
        printf "$char"
        printf '\n'
        NUM_TABS=$(( $NUM_TABS + 1 ))
        print_tabs "$NUM_TABS"
    elif [[ "$CLOSE_CHARS" =~ "$char" ]]; then
        printf '\n'
        NUM_TABS=$(( $NUM_TABS - 1 ))
        print_tabs "$NUM_TABS"
        printf "$char"
    elif [[ "$COMMA" = "$char" ]]; then
        printf "$char"
        printf '\n'
        print_tabs "$NUM_TABS"
    elif [[ "$COLON" = "$char" ]]; then
        printf "$char"
        printf ' '
    fi
done

printf '\n'
exit 0

